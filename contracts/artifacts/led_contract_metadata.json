{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "getContractAddress",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "kill",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ledStatus",
				"outputs": [
					{
						"internalType": "int8",
						"name": "",
						"type": "int8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "readLed",
				"outputs": [
					{
						"internalType": "int8",
						"name": "",
						"type": "int8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "retrieveEther",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int8",
						"name": "newOn",
						"type": "int8"
					}
				],
				"name": "setLed",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnerShip",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Sets led in Smart Contract",
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "sets the owner of the contract "
				},
				"getContractAddress()": {
					"details": "Return",
					"returns": {
						"_0": "retruns the address of the contract "
					}
				},
				"getOwner()": {
					"details": "Returns the address of the current owner of the contract"
				},
				"kill()": {
					"details": "To kill the contract from the blockchain"
				},
				"readLed()": {
					"details": "Return value ",
					"returns": {
						"_0": "'ledStatus' status of the led 1 is on 0 is off"
					}
				},
				"retrieveEther()": {
					"details": "Returns Ether that was send to the contract"
				},
				"setLed(int8)": {
					"details": "Stores value in Blockchain",
					"params": {
						"newOn": "1 - toturn led on  0 - turn led off  "
					}
				},
				"transferOwnerShip(address)": {
					"details": "transfers the ownership of the contract "
				}
			},
			"title": "IoT-Smart Contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/led_contract.sol": "led_contract"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/interface_led.sol": {
			"keccak256": "0xf36a2b383ebfd141ba65e5284d0e86425f1db2e8858868f7e52884a213fdf6cb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e2e2ab378a9d55f71611d15a6541fb4d1d301336302b0c0149d4685f82d6bd8c",
				"dweb:/ipfs/QmR4TgzsfMpzDPgTZogCCi6ZccvTzZHd3iptt579nSzVZH"
			]
		},
		"contracts/led_contract.sol": {
			"keccak256": "0xbfe99ebfa5e5e595c2f6f8cefe607e8a96cdd64291f8c3f3097f844cad71b15e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4cd2a0369dee33245f8124022903944e1161059236eda6cf7491a807326ef9f3",
				"dweb:/ipfs/QmSNLjZiFvvpea3uBXJNnmEgZU1xMFiT6jGSFG2VPynbL5"
			]
		}
	},
	"version": 1
}